" 更新时间：2016-03-30 12:15:21
" 定义快捷键的前缀，即 <Leader>
let mapleader=";"
noremap \ ;

" >>
" 文件类型侦测

" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载对应的插件
filetype plugin on

" <<

" >>
" vim 自身（非插件）快捷键

" 定义快捷键到行首和行尾
" nmap LB 0
" nmap LE $

" 设置快捷键将选中文本块复制至系统剪贴板
map <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至vim
map <Leader>p "+p
map <Leader>P "+P
map <Leader>gp "+gp
map <Leader>gP "+gP

map <Leader>ss :w<CR>
map <Leader>sa :wa<CR>
map <Leader>qq :q<CR>
map <Leader>qa :qa<CR>

" 设置快捷键遍历子窗口
" 依次遍历
" nnoremap <leader>ww <C-W><C-W>
" 跳转至右方的窗口
nnoremap <Leader>wl <C-W>l
" 跳转至方的窗口
nnoremap <Leader>wh <C-W>h
" 跳转至上方的子窗口
nnoremap <Leader>wk <C-W>k
" 跳转至下方的子窗口
nnoremap <Leader>wj <C-W>j

" 定义快捷键在结对符之间跳转
"nmap <Leader>M %

" <<

" 让配置变更立即生效
"autocmd BufWritePost $MYVIMRC source $MYVIMRC

" >>
" 其他

" 开启实时搜索功能
set incsearch

" 搜索时大小写不敏感
set ignorecase

" 关闭兼容模式
set nocompatible

" vim 自身命令行模式智能补全
set wildmenu

" <<

" >>>>
" 插件安装

" vundle 环境设置
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
" vundle 管理的插件列表必须位于 vundle#begin() 和 vundle#end() 之间
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'vim-scripts/phd'
Plugin 'Lokaltog/vim-powerline'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'derekwyatt/vim-fswitch'
Plugin 'kshenoy/vim-signature'
Plugin 'vim-scripts/BOOKMARKS--Mark-and-Highlight-Full-Lines'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-scripts/DfrankUtil'
Plugin 'vim-scripts/vimprj'
Plugin 'dyng/ctrlsf.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'vim-scripts/DrawIt'
Plugin 'SirVer/ultisnips'
Plugin 'scrooloose/nerdtree'
Plugin 'fholgado/minibufexpl.vim'
" Plugin 'gcmt/wildfire.vim'
Plugin 'sjl/gundo.vim'
Plugin 'Lokaltog/vim-easymotion'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'derekwyatt/vim-protodef'
"Plugin 'terryma/vim-multiple-cursors'
"Plugin 'octol/vim-cpp-enhanced-highlight'
"Plugin 'suan/vim-instant-markdown'
"Plugin 'lilydjwg/fcitx.vim'
Plugin 'Chiel92/vim-autoformat'

" 插件列表结束
call vundle#end()
filetype plugin indent on
" <<<<

" 配色方案
set background=dark
colorscheme solarized
"colorscheme molokai
"colorscheme phd

" >>
" 营造专注气氛

" 禁止光标闪烁
set gcr=a:block-blinkon0

" 禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R

" 禁止显示菜单和工具条
set guioptions-=m
set guioptions-=T

" 将外部命令 wmctrl 控制窗口最大化的命令行参数封装成一个 vim 的函数
fun! ToggleFullscreen()
	call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
endf
" 全屏开/关快捷键
map <silent> <F11> :call ToggleFullscreen()<CR>
"" 启动 vim 时自动全屏
"autocmd VimEnter * call ToggleFullscreen()

" <<

" >>
" 辅助信息

" 总是显示状态栏
set laststatus=2

" 显示光标当前位置
set ruler

" 开启行号显示
set number

" 高亮显示当前行/列
set cursorline
set cursorcolumn

" 高亮显示搜索结果
set hlsearch

" <<

" >>
" 其他美化

" 设置 gvim 显示字体
set guifont=YaHei\ Consolas\ Hybrid\ 14 

" 禁止折行
set wrap

" 设置状态栏主题风格
let g:Powerline_colorscheme='solarized256'

" <<

" >>
" 语法分析

" 开启语法高亮功能
syntax enable
" 允许用指定语法高亮配色方案替换默认方案
syntax on

" <<

" >>
" 缩进

" 自适应不同语言的智能缩进
filetype indent on

" 将制表符扩展为空格
set noexpandtab
" set expandtab
" 设置编辑时制表符占用空格数
set tabstop=4
" 设置格式化时制表符占用空格数
set shiftwidth=4
" 让 vim 把连续数量的空格视为一个制表符
set softtabstop=4

" 缩进可视化插件 Indent Guides
" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=0
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
nmap <silent> <Leader>i <Plug>IndentGuidesToggle

" <<

" >>
" 代码折叠

" 基于缩进或语法进行代码折叠
"set foldmethod=indent
set foldmethod=syntax
" 启动 vim 时关闭折叠代码
set nofoldenable

" <<

" >>
" 接口与实现快速切换

" *.cpp 和 *.h 间切换
nmap <silent> <Leader>sw :FSHere<cr>

" <<

" >>
" 代码收藏

" 自定义 vim-signature 快捷键
let g:SignatureMap = {
        \ 'Leader'             :  "m",
        \ 'PlaceNextMark'      :  "m,",
        \ 'ToggleMarkAtLine'   :  "m.",
        \ 'PurgeMarksAtLine'   :  "m-",
        \ 'DeleteMark'         :  "dm",
        \ 'PurgeMarks'         :  "mda",
        \ 'PurgeMarkers'       :  "m<BS>",
        \ 'GotoNextLineAlpha'  :  "']",
        \ 'GotoPrevLineAlpha'  :  "'[",
        \ 'GotoNextSpotAlpha'  :  "`]",
        \ 'GotoPrevSpotAlpha'  :  "`[",
        \ 'GotoNextLineByPos'  :  "]'",
        \ 'GotoPrevLineByPos'  :  "['",
        \ 'GotoNextSpotByPos'  :  "mn",
        \ 'GotoPrevSpotByPos'  :  "mp",
        \ 'GotoNextMarker'     :  "[+",
        \ 'GotoPrevMarker'     :  "[-",
        \ 'GotoNextMarkerAny'  :  "]=",
        \ 'GotoPrevMarkerAny'  :  "[=",
        \ 'ListLocalMarks'     :  "ms",
        \ 'ListLocalMarkers'   :  "m?"
        \ }

" <<

" >>
" 标签列表

" 设置 tagbar 子窗口的位置出现在主编辑区的左边
let tagbar_left=1
" 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nnoremap <Leader>wt :TagbarToggle<CR>
" 设置标签子窗口的宽度
let tagbar_width=32
" tagbar 子窗口中不显示冗余帮助信息
let g:tagbar_compact=1
" 设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_cpp = {
     \ 'ctagstype' : 'c++',
     \ 'kinds'     : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0', 
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

" <<

" >>
" 代码导航
 
" 基于标签的代码导航

" 设置插件 indexer 调用 ctags 的参数
" 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+l+p+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+l+p+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"
let g:indexer_disableCtagsWarning=1
let g:indexer_debugLogLevel=4
let g:indexer_debugLogFilename="/root/data/indexer.txt"
" 正向遍历同名标签
nmap <Leader>nt :tnext<CR>
" 反向遍历同名标签
nmap <Leader>pt :tprevious<CR>

" 基于语义的代码导航

"nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>
" 只能是 #include 或已打开的文件
"nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>

" <<

" >>
" 查找

" <<

" >>
" 内容替换

" 快捷替换
let g:multi_cursor_next_key='<S-n>'
let g:multi_cursor_skip_key='<S-k>'

" 精准替换
" 替换函数。参数说明：
" confirm：是否替换前逐一确认
" wholeword：是否整词匹配
" replace：被替换字符串
function! Replace(confirm, wholeword, replace)
    wa
    let flag = ''
    if a:confirm
        let flag .= 'gec'
    else
        let flag .= 'ge'
    endif
    let search = ''
    if a:wholeword
        let search .= '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
    else
        let search .= expand('<cword>')
    endif
    let replace = escape(a:replace, '/\&~')
    execute 'argdo %s/' . search . '/' . replace . '/' . flag . '| update'
endfunction
" 不确认、非整词
nnoremap <Leader>R :call Replace(0, 0, input('Replace '.expand('<cword>').' with: '))<CR>
" 不确认、整词
nnoremap <Leader>rw :call Replace(0, 1, input('Replace '.expand('<cword>').' with: '))<CR>
" 确认、非整词
nnoremap <Leader>rc :call Replace(1, 0, input('Replace '.expand('<cword>').' with: '))<CR>
" 确认、整词
nnoremap <Leader>rcw :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>
nnoremap <Leader>rwc :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>

" <<

" 模板补全
" UltiSnips 的 tab 键与 YCM 冲突，重新设定
let g:UltiSnipsSnippetDirectories=["mysnippets"]
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"

" >>
" YCM 补全

" YCM 补全菜单配色
" 菜单
" highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" 选中项
" highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900

" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1

" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_confirm_extra_conf=0

" 开启 YCM 标签补全引擎
let g:ycm_collect_identifiers_from_tags_files=0
"" 引入 C++ 标准库 tags
"set tags+=/data/misc/software/app/vim/stdcpp.tags
"set tags+=/data/misc/software/app/vim/sys.tags

" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
inoremap <leader>; <C-x><C-o>

" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview

" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=1

" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0

" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1

" <<
 
" >>
" 由接口快速生成实现框架

" 成员函数的实现顺序与声明顺序一致
let g:disable_protodef_sorting=1

" <<

" >>
" 库信息参考
 
" 启用:Man命令查看各类man信息
source $VIMRUNTIME/ftplugin/man.vim

" 定义:Man命令查看各类man信息的快捷键
nmap <Leader>ma :Man 3 <cword><CR>

" <<

" >>
" 工程文件浏览

" 使用 NERDTree 插件查看工程文件。设置快捷键，速记：file list
nmap <Leader>wf :NERDTreeToggle<CR>
" 设置 NERDTree 子窗口宽度
let NERDTreeWinSize=32
" 设置 NERDTree 子窗口位置
let NERDTreeWinPos="right"
" 显示隐藏文件
let NERDTreeShowHidden=0
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1

" <<

" >>
" 多文档编辑
 
" 显示/隐藏 MiniBufExplorer 窗口
" map <Leader>ww :MBEToggle<cr>

" buffer 切换快捷键
" map <leader>nb :MBEbn<cr>
" map <leader>pb :MBEbp<cr>
map <leader>nb :MBEbf<cr>
map <leader>mb :MBEbb<cr>
map <leader>ww :MBEFocus<cr>

" <<<C-S-Tab>


" >>
" 环境恢复

" 设置环境保存项
set sessionoptions="blank,globals,localoptions,tabpages,sesdir,folds,help,options,resize,winpos,winsize"

" 保存 undo 历史。必须先行创建 .undo_history/
set undodir=~/.undo_history/
set undofile

" 保存快捷键
" map <f4> :mksession! ~/my.vim<cr> :wviminfo! ~/my.viminfo<cr>

" 恢复快捷键
" map <c-f4> :source ~/my.vim<cr> :rviminfo ~/my.viminfo<cr>

" <<
 
" 设置快捷键实现一键编译及运行
"nmap <Leader>m :wa<CR> :cd build/<CR> :!rm -rf main<CR> :!cmake CMakeLists.txt<CR>:make<CR><CR> :cw<CR> :cd ..<CR>
"nmap <Leader>g :wa<CR>:cd build/<CR>:!rm -rf main<CR>:!cmake CMakeLists.txt<CR>:make<CR><CR>:cw<CR>:cd ..<CR>:!build/main<CR>

" " >>
" " 快速选中结对符内的文本
 " 
" " 快捷键
" map <SPACE> <Plug>(wildfird-fuel)
" vmap <S-SPACE> <Plug>(wildfire-water)
" 
" " 适用于哪些结对符
" let g:wildfire_objects = ["i'", 'i"', "i)", "i]", "i}", "i>", "ip"]
" 
" " <<

" 调用 gundo 树
nnoremap <Leader>ud :GundoToggle<CR>


"""""""""""""""""""""""""""""""""""""""""
" Add by yaofahua
"
""""""""""""""""""""""""""""""""""""""""
set fileencodings=utf-8,gb18030,gbk,gb2312,big5
set termencoding=utf-8
set encoding=utf-8

" " 格式化当前代码行
" function! YYFormatCode()
    " " [(]
    " execute 's/\v {0,}([;()]) {0,}/\1/ge'
    " " [ + ]
    " execute 's/\v {0,}([=+\-*/|><]) {0,}/ \1 /ge'
    " " [, ]
    " execute 's/\v {0,}([,]) {0,}/\1 /ge'
    " " Special case below
    " " double
    " execute 's/\v([+\-*/=|&]) *\1/\1\1/ge'
    " " =
    " execute 's/\v([+\-*/><]) *\=/\1=/ge'
    " " * )
    " execute 's/\v.\zs *\ze[;)]//ge'
    " " = * (
    " execute 's/\v\= *\* *\(/= *(/ge'
    " " if( for( switch(
    " execute 's/\v(if|switch|for|while)\(/\1 (/ge'
    " " a ++
    " execute 's/\v\w\zs *\ze[\-+*]{2}//ge'
    " " ++ a
    " execute 's/\v[\-+]{2}\zs *\ze\w//ge'
" endfunction
" nnoremap <silent> <Leader>ff :call YYFormatCode()<CR>

" NERD Commenter plugin
let g:NERDSpaceDelims = 1
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDCompactSexyComs = 1

nnoremap <silent> <Leader>hl :<c-u>nohlsearch<CR><c-l>

nnoremap <silent> <leader>wv :vertical resize<cr>
nnoremap <silent> <leader>wr :resize<cr>
nnoremap <silent> <leader>ws :CtrlSFToggle<cr>

" 不改动文件的情况下，跳转到其它文件
set hidden

" 用"0寄存器的值替换光标所在的值
" nnoremap <silent> <leader>rr diw"0P
nnoremap <silent> <leader>rr :s/\V<c-r><c-w>/<c-r>0/<cr>

" 
let g:miniBufExplBuffersNeeded = 0
let g:miniBufExplorerAutoStart = 1
" let g:miniBufExplMaxHeight = 2
nnoremap <silent> <leader>jj <c-]>
nnoremap <silent> <leader>hh :tselect <c-r><c-w><cr>
nnoremap <silent> <leader>kk <c-o>
nnoremap <silent> <leader>ll <c-i>
nnoremap <silent> <leader>nn <c-f>
nnoremap <silent> <leader>mm <c-b>

" 更新文件，当检测到有其它软件修改了该文件
set autoread

" 修改path
set path+=/usr/include/i386-linux-gnu
" set tags+=/home/yaofahua/proj/sw/tools/ctags/sysInc
" set tags+=/home/yaofahua/proj/sw/tools/ctags/linux_3_3_8
" set tags+=/home/yaofahua/proj/sw/tools/ctags/linux_3_14_43
" set tags+=/home/yaofahua/proj/sw/tools/ctags/linux_3_10_y
set tags+=/home/yaofahua/proj/sw/tools/ctags/uClibc

" 更改当前工程
function! YYChangeCurrentProj()
    execute 'cd <cWORD>'
    execute 'NERDTreeCWD'
endfunction
nnoremap <silent> <Leader>cp :call YYChangeCurrentProj()<CR>

" 复制当前文件绝对路径到系统剪切板
nnoremap <leader>fp :let @+=expand('%:p')<cr>:echo @+<cr>

" 快速切换buffer, 数字+回车
nnoremap <cr> <c-^>

" 打开系统剪切板指向的文件
function! YYOpenFile()
    let l:filepath = @+
    if (!filereadable(l:filepath))
        echo "Error:Invalid file, " . l:filepath
    else
        execute 'e ' . escape(l:filepath, ' ')
    endif
endfunction
nnoremap <leader>ef :call YYOpenFile()<cr>

" 复制剪切板代码到当前行的上方，并格式化代码(:Autoformat)
function! YYInsertCode(beforeCurLine, sysClipBoard)
    let curLine = line(".")
    let totalLine = line("$")

    if (a:sysClipBoard)
        let reg = "+"
    else
        let reg = ""
    endif

    if (a:beforeCurLine)
        execute "put!" . reg
        let lines = line("$") - totalLine
        execute curLine . "," . (curLine + lines -1) . "Autoformat"
        execute "" . (curLine + line("$") - totalLine) 
    else
        execute "put" . reg
        let lines = line("$") - totalLine
        execute (curLine + 1) . "," . (curLine + lines) . "Autoformat"
        execute "" . curLine
    endif
endfunction
nnoremap <leader>It :put!<cr>
nnoremap <leader>EE :put! +<cr>
nnoremap <leader>Ic :call YYInsertCode(1, 0)<cr>
nnoremap <leader>IC :call YYInsertCode(1, 1)<cr>
nnoremap <leader>it :put<cr>
nnoremap <leader>ee :put +<cr>
nnoremap <leader>ic :call YYInsertCode(0, 0)<cr>
nnoremap <leader>iC :call YYInsertCode(0, 1)<cr>


" 插入多行空行
nnoremap <leader>BB I<cr><esc>
nnoremap <leader>bb o<esc>k

" 格式化代码
noremap <leader>ff :.Autoformat<cr>

" 关闭当前文件
nnoremap <silent> <f3> :MBEbd<cr>

" 注释与反注释
map <leader>c<space> <plug>NERDCommenterComment
map <leader>cc <plug>NERDCommenterToggle

" easy-motion plugin
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-overwin-f2)

" 大小写转换
noremap <f4> g~iw

" 使用 ctrlsf.vim 插件在工程内全局查找光标所在关键字，设置快捷键。快捷键速记法：search in project
"位置：.vim/bundle/indexer.tar.gz/plugin/indexer.vim的IndexerInfo函数上方
" function! YYIndexerInfo()
   " let l:sPathsRoot = ""

   " for l:lProjects in g:vimprj#dFiles[ g:vimprj#iCurFileNum ]["projects"]
      " let l:dCurProject = s:dProjFilesParsed[ l:lProjects.file ]["projects"][ l:lProjects.name ]

	  " let l:sPathsRoot .= join(l:dCurProject.pathsRoot, ' ')
   " endfor

   " echom "Path root: " . l:sPathsRoot
   " return l:sPathsRoot
" endfunction
function! YYSearchFiles(word)
	let l:search = a:word . ' ' . YYIndexerInfo()
	" echom 'search: ' . l:search

	call ctrlsf#Search(l:search, 0)
endfunction
com! -n=* Ctrlsf call YYSearchFiles(<q-args>)
nnoremap <leader>sp :call YYSearchFiles(expand('<cword>'))<cr>

"
" 关闭已经打开的文件
" 除了indexer_files、vimrc、当前文件
"
function! YYCloseFiles()
	" 最后一个文件号
	let l:last = bufnr("$")
	" 当前文件号
	let l:current = bufnr("%")
	let l:i = 0
	let l:name = ""

	" 保存所有文件
	:wa

	" 遍历文件
	while l:i <= l:last
		let l:i += 1

		" 排除当前文件、indexer_files、vimrc文件
		if l:i == l:current || !buflisted(l:i) || strridx(bufname(l:i),"indexer_files") != -1 
		\ || strridx(bufname(l:i), "vimrc") != -1	
		   continue
		endif
		
		" 关闭文件 
		execute l:i . "bdelete"
	endwhile
endfunction
nnoremap <f6> :call YYCloseFiles()<cr>
